* java基础
** 容器类
*** Map相关
**** HashMap的底层数据结构，扩容机制，局限性与线程安全
**** HashMap初始容量多少？（16）为啥要设计初始为16？如果传入容量10会怎么样？（还是会构建16容量的）； 
**** HashMap 的遍历方式 
**** hashcode方式
**** 重写hashcode()是否需要重写equals()，不重写会有什么后果 
**** 一致性hash算法
**** hash 冲撞怎么办？如何 rehash 
**** HashMap用红黑树解决什么问题
**** HashMap的put过程
     判断在0出头插入null --> 计算hash值和索引值 --> 判断更新 --> 头插新节点
**** HashMap的长度为什么是2的倍数
     找索引时 key 的 hash 值与数组的长度值减 1 进行与运算，长度为 2 的倍数时能减少碰撞
**** JDK 1.7 和 1.8 中 HashMap 的区别
     1.8 增加红黑树、头插变为尾插、扩容后元素位置要么在原位置，要么在原位置 + 扩容前旧容量
**** Hashmap为什么线程不安全
     扩容时链表可能形成闭环
**** 如何实现线程安全的HashMap
**** hashtable线程安全嘛，讲讲线程安全具体实现
**** Collections.sychronizedMap与ConcurrentHashMap的区别
**** HashMap与ConcurrentHashMap的性能比较 
**** ConcurrentHashMap 怎么保证线程安全
**** ConcurrentHashMap 和 HashMap 区别 
**** HashMap 能不能存储 null 能，放在第一个格子里？concurrentHashMap 能不能存储 null？ 
*** Collection相关
**** List类
***** ArrayList中如何删除某个元素的所有相同元素
***** ArrayList 和 LinkedList 的区别，内存分配上？
***** 为什么 ArrayList 可以直接访问到元素 
***** List遍历时如何删除元素？fail—fast是什么？fail—safe是什么？ 
***** CopyOnWriteArrayList读写分离
**** List和Set区别
**** hashset是怎么实现的？ hashmap是怎么实现hashset的？
**** 集合类继承关系(Iterator、Collection（List、Set、Queue）、Map)
**** 讲一下迭代器的实现原理 
**** 序列化和反序列化。反序列化失败的场景。
** 面向对象相关
*** Java三大特性
*** java面向对象原则以及原因，与C++区别
*** 多态实现原理
*** 泛型以及泛型擦除。List<A>类型的list,可以加入无继承关系的B类型对象吗？如何加入？
*** 接口与类，什么时候用
*** 抽象类和接口区别 
*** 内部类了解吗？匿名内部类了解吗？
*** 继承的缺点
** String相关
*** 新建一个 string 会创建几个对象 
*** 字符串 == 比较。输出true还是false
*** string是否可变，string a + string b是怎么实现的
*** String为什么设计成final不可变？ 是怎么实现不可变的？
*** 自己能实现一个不可变的类吗？
** IO相关
*** bio nio aio区别 
*** 阻塞io和非阻塞io说一下，非阻塞io优点是什么？怎么去监听，怎么实现非阻塞的
** 异常相关
*** Exception和Error区别
*** java有内存泄漏吗？说一下内存泄漏的原因并举一个例子
*** OutOfMemoryError（OOM） 可能是哪些原因导致的 
*** 说一下stackoverflow和oom的区别（提到了栈帧） 
*** 怎么快速出现一个stackoverflow错误 
** 零碎
*** java和python区别 
*** Java基本类型有多少种 
    8
*** Boolean占几个字节 
*** 引用的类型
*** final 的作用，加在变量、方法、类的区别
*** 静态代理和动态代理的区别
*** JDK8的stream的操作
*** UML图，ER图，流程图
*** 字符集与字符编码的区别 
* java并发和多线程
** 线程池相关
*** 为什么要使用线程池
*** 线程池常用7大参数
    核心线程数、最大线程数、阻塞队列、线程最大存活时间 
*** 线程池原理，参数有哪些？执行任务的逻辑？
*** 线程池大小如何设置
*** 线程池的参数;为什么需要超出最大容量的策略 
*** 线程池中LinkedBlockingQueue满了的话，线程会怎么样
*** 线程池工作流程
*** 线程池的类别和区别
*** 阻塞队列的类别和区别 
*** 线程池的工作原理，核心线程数和最大线程数什么时候用到 
*** 核心线程池ThreadPoolExecutor的参数（必考）
*** 如何控制线程池线程的优先级
*** 线程池的拒绝策略有哪些 
*** Execuors类实现的几种线程池类型，阿里为啥不让用？
*** 手写简单的线程池，体现线程复用
*** 线程池，连接池，各自优点
*** druid连接池
** Java锁相关
*** Java中的锁如何实现
*** 怎么实现分布式锁?
*** Synchronize是公平锁吗，可重入吗 
*** 公平锁和非公平锁区别？为什么公平锁效率低？
*** 锁优化。自旋锁、自适应自旋锁、锁消除、锁粗化、偏向锁、轻量级锁、重量级锁解释
*** synchronized 原理？
*** synchronized和Lock的区别？哪个效率高？
*** 一个类里有两个synchronize方法method1和method2, 如果有两个线程分别执行method1和method2，他们是串行执行还是并行执行 
*** AQS框架，AQS思想，以及基于AQS实现的lock, CountDownLatch、CyclicBarrier、Semaphore介绍
** 线程相关
*** 创建和终止一个线程
*** 线程start 、 run方法区别 
*** 进程线程区别，线程安全和非线程安全区别
*** 线程状态，start,run,wait,notify,yiled,sleep,join等方法的作用以及区别
*** wait,notify阻塞唤醒确切过程？在哪阻塞，在哪唤醒？为什么要出现在同步代码块中，为什么要处于while循环中？
*** wait(), sleep()区别。yield方法
*** wait 和 notify 方法？
*** 线程中断，守护线程
*** ThreadPoolExecutor的工作流程（必考）
*** 线程之间如何通信 
** 线程安全相关
*** 哪些类是线程安全的
*** ArrayList和LinkedList如何实现线程安全
*** 线程不安全底层原因，如何解决
** volatile及其底层实现，禁止重排序的场景？单例模式中volatile的作用？
** volatile怎么保证可见性的？
** volatile 和 synchronized 的区别 
** volitile保证原子性？
   由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。
** Future的底层实现异步原理
** 怎么抗高并发？
** 并发控制可以用哪些方式实现 
** 多线程如何控制同步
** JUC包
** Atomic类如何保证原子性（CAS操作）
** atomic下的原子类有用到吗？采用了CAS
** CAS算法在哪里有应用？扯了一下乐观锁和悲观锁
** Java乐观锁机制，CAS思想？缺点？是否原子性？如何保证？
** 高并发场景下hashmap使用，CAS，ABA问题
** 怎么优化CAS
** 讲一下乐观锁和悲观锁，在java中的具体实现，使用场景
** 讲一下ConcurrentHashMap 
** 自旋锁和阻塞锁的区别
** 公平锁和非公平锁的区别
** jdk中哪种数据结构或工具可以实现当多个线程到达某个状态时执行一段代码
** 栅栏和闭锁的区别
** 如何使用信号量实现上述情况 
** 软引用、弱引用、强引用，软引用和弱引用具体区别 
** ThreadLocal
** 线程间如何通信
** 三个线程交替打印ABC
** 多个消费者生产者，如何处理同一段数据（消费者-生产者模型） 
** 手写消费者生产者模式
** 手写阻塞队列
* jvm
** 类加载相关
*** 类的编译过程和加载过程
*** 类加载器？
*** 双亲委派模型及其好处
*** 破坏双亲委派机制的场景？如何破坏？
*** JDBC和双亲委派模型关系 
*** 了解下tomcat的类加载机制
** 内存空间相关
*** jvm内存空间
    方法区、堆、虚拟机栈、本地方法栈、程序计数器 
*** 数据区域
*** 虚拟机栈和本地方法栈的区别
*** 类信息会加载到JVM哪个区域 
*** 新建的字符串会存到哪 
*** 堆和栈的区别
*** 堆内存分配策略
*** 递归调用是在堆上还是栈上 
*** 创建一个对象的步骤
** 垃圾回收相关
*** jvm的gc机制(GC算法，收集器)
*** gc 的垃圾搜集器？（没具体了解过），那讲讲该怎么回收？
*** 判断是否可回收
    引用计数法、可达性分析法 
*** 如何判断对象是否存活？回收对象的两次标记过程
*** 可达性分析 root 有哪些？(哪些对象可作为GC ROOT)
*** 垃圾收集算法有哪些 
*** 新生代大小参数是啥
*** 堆的分类老年代新生代
*** 新生代和老年代的区别 
*** 大量大对象进入老年代会有什么问题（频繁触发full GC） 
*** 有很多个大对象，应该如何改进 
*** 高吞吐量的话用哪种gc算法
*** 新生代和年老代的GC算法分别是什么
    新生代 -> 复制，老年代 -> 标记-整理（CMS用的标记-清除） 
*** 标记清除和标记整理的区别
*** 了解过CMS收集器吗 
*** CMS/G1的流程
    初始标记 -> 并发标记 -> 重新标记 -> 并发清除 
*** CMS/G1的特点和区别
    CMS：尽可能减少停顿时间，采用标记-清除，会造成内存碎片化 
    G1：可以预测停顿时间，采用标记-整理，减少内存碎片化， 将内存划分为 region 粒度 
*** Minor GC和Full GC触发条件
*** GC中Stop the world（STW）
*** 各垃圾回收器的特点及区别
*** 标记-整理会触发 Stop The World 吗
*** 什么情况下触发mirror GC 
*** Full GC触发条件
*** 什么时候不用分代收集的方式
*** JVM性能调优，常用命令，以及工具
*** gc调优的过程？
* 操作系统
** 进程与线程相关
*** 并行和并发的概念和区别。
    时间片，上下文切换
*** 进程和线程的区别 
*** 子进程从父进程继承了什么
*** 操作系统分配的进程空间是怎样的？线程能共享哪些？
*** 进程间通信方式IPC
    管道、消息队列、信号量、共享内存 
*** 线程间通信方式
    消息队列、全局变量 
*** 线程和进程是怎么调度的？线程调度和进程调度有什么区别 
*** 什么是僵尸进程
*** 线程与协程的区别 
*** 讲一讲多线程和线程池
*** Linux的最大进程数限制 
*** Linux进程有哪几种状态 
*** 线程安全
*** 死锁条件及解决方式
** 内存相关
*** 跑程序时候发现服务器系统内存占用100%怎么办
*** 内存泄漏  程序退出去之后内存还会泄漏吗？ 
*** 虚拟地址内存空间 
*** 操作系统内存管理方式，分页分段以及段页式的优缺点
*** 页面置换算法有哪些，FIFO为什么不好？如何改进?LRU思想，手写LRU
*** 如果访问虚拟地址时，该地址在物理内存中不存在，会发生什么 
** IO相关
*** IO多路复用模型和Socket 
*** 中间件使用哪些IO模型 
*** 共享内存与Socket的优缺点与性能比较
** 用户态和核心态
** 操作系统有哪些作用 
* 计网
** tcp udp
*** tcp
**** tcp层和ip层区别
**** tcp报文结构
**** tcp为什么是可靠的
      超时重传，滑动窗口。TCP状态。
**** TCP超时时间，RTT怎么计算
**** 4G切换Wifi时候TCP怎么实现流量变化？
     分组丢失，快重传，快恢复等。路由器交换机排队
**** TCP三次握手以及四次挥手流程
**** 为什么需要三次握手
     防止已过期的连接再次传到被连接的主机 
**** 二次握手有什么问题，三次握手有什么缺陷
**** 为什么需要四次挥手 / 断开连接时为什么比建立连接多一次
     服务端的 ACK 和 FIN 一般都会分开发送，ACK 表示自己收到了客户端的断开请求（但还有数据没传输完），FIN 表示自己传输完了数据 
**** TIME_WAIT状态处在哪一方以及作用
     保证客户端发送的最后一个ACK报文能够到达服务器 
     防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失 
**** TCP四次挥手的时候close-wait过多怎么办
**** 流量控制和拥塞控制
**** TCP粘包现象原因和解决方法
**** 常见的TCP优化算法
*** udp
**** udp如何重组数据
**** 哪些情况可以用udp
**** 如何实现UDP的可靠传输 
**** TCP 和 UDP 区别？ 协议头有哪些内容？
**** UDP实现TCP
*** 网络延迟大的情况怎么处理
** http
*** HTTP协议是哪个层的协议，属于TCP还是UDP
*** HTTP 1.0 1.1 2.0之间区别
*** http 头有哪些字段？ 
*** HTTP Request Header 中有哪些内容 
*** 判断长链接和短连接？
*** Http状态码301、304、302、204、500、504 
*** HTTP请求到响应全过程（服务端）
*** HTTP请求头及其作用
*** 解释HTTPs
*** HTTPs优势
    CA证书认证、加密传输 
*** HTTPs为什么传输过程中采用对称加密，协商时采用非对称加密，相对于只使用非对称加密有什么好处，在哪一层实现
    对称加密快
*** 为什么要用对称加密 key 加密信息，而不用公钥直接加密信息 
*** HTTP和HTTPs
*** HTTPs的握手过程(建立连接流程)
*** http是有状态还是无状态？ TCP是有状态还是无状态？https是有状态还是无状态？
*** HTTP请求有哪些？GET 和 POST 区别 
*** restful接口定义，和普通url区别，restful有哪些类型
** SSH登录，非对称加密
** RPC是哪个层的协议，原理
** OSI和TCP/IP的层次结构
** socket是哪个层的，作用是什么，原理是什么？
** 从输入 URL 到页面加载完成，中间发生了什么（基本必问的问题了，因为这个问题能考察对计算机网络整体的掌握程度，以及方便面试官扩展问题）
    客户端传给服务端时经过 TCP/IP 四层模型，中途依次加入HTTP报文、TCP报文、IP报文、MAC报文，然后逆序依次拆包 
** cookie和session的区别
** 客户端禁用cookie怎么办？ 你说的实现方式安全吗？
** 重定向和转发区别
** 应用层和网络层是干嘛的 
** arp是网络层的吗
** DNS 属于 TCP 还是 UDP，原理 
** DNS查询过程
** Ping 使用的什么协议，原理 
* 数据库
** mysql相关
*** 三范式
*** 事务相关
**** 什么是事务
**** 事务的特性（ACID），详细说明各个特性的含义
     原子性、一致性、隔离性、持久性 
**** 如何保证事务的ACID特性
**** 原子性的底层实现
**** 事务隔离级别
     未提交读 -> 已提交读 -> 可重复读 -> 串行化 
**** 默认隔离等级(不同引擎)
**** 隔离级别的单位是数据表还是数据行？如串行化级别，两个事务访问不同的数据行，能并发？
**** mysql 可重读的底层实现》？ MVCC ?
**** MVCC多版本并发控制（必考）
**** MVCC怎么实现的？什么是快照读？快照读能读取到最新的吗？快照读和当前读的区别？
**** 如何解决事务的并发问题(脏读，幻读)（必考）
**** 脏读、不可重复读、幻读的区别？这些概念是在事务内还是事务外？ 事务内 
**** 事务隔离级别怎么实现预防上述问题（eg: 可重复读怎么实现预防不可重复读） 
*** 索引相关
**** 如何创建索引
**** 建立索引的原则 
**** 如果对每一列都建索引有什么不好？ 
**** 如何使用索引避免全表扫描？
**** 常用索引（B树、Hash）
**** 主键索引和二级索引（自建索引）的区别和联系 
**** 聚簇索引和非聚簇索引的区别
**** 联合索引和单个索引的区别，联合索引的最左匹配原则
**** 最左前缀！！联合索引B+树是如何建立的？是如何查询的？当where子句中出现>时，联合索引命中是如何的? 如 where a > 10 and b = “111”时，联合索引如何创建？mysql优化器会针对得做出优化吗？
**** 最左前缀匹配用了B+树的哪些特性？
**** 回表查询和覆盖索引
**** B树和B+树的区别
     B+树的非叶子节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖” 
     B+树查询必须查找到叶子节点，B树只要匹配到即可不用管元素位置，因此B+树查找更稳定（也不慢） 
     对于范围查找来说，B+树只需遍历叶子节点链表即可，B树却需要重复地中序遍历 
**** 为什么选择B+树作为索引结构，为什么不能红黑树？要提到磁盘预读
**** 索引B+树的叶子节点都可以存哪些东西（必考）
**** 为啥B+树最后叶子节点需要用链表相连接？ 便于区间查找
**** B+树和红黑树的区别
**** 红黑节点的个数
**** 红黑树旋转次数
**** 红黑树的插入删除查询时间复杂度
**** B+树的插入删除查询时间复杂度
**** 查询在什么时候不走（预期中的）索引（必考）
**** （a,b,c）联合索引，为什么不能单用（b），而一定要用（a,b）？B+树是怎么实现的？
**** 联合索引A，B，C，直接查询C走不走索引，A,C呢，A,B呢 
**** 如果sql语句中有like，会不会走索引 
**** 如果索引值为null，走不走索引 
**** 索引失效的情况
**** 身份证如何有效建立索引
*** 引擎相关
**** Innodb和myisam的区别 
**** InnoDB的行锁/表锁
**** Innodb索引类型
*** 锁相关
**** 数据库有哪些锁
**** 介绍Innodb锁机制，行锁，表锁，意向锁
**** 表锁和行锁的区别
**** 哪些场景需要加表锁
**** 插入一条数据需要加什么锁
**** 执行 select 和 update 会如何加锁 
**** 悲观锁与乐观锁
**** 数据库如何实现乐观锁
**** 独占锁，共享锁和更新锁
**** 间歇锁的实现原理
*** Mysql架构
*** Mysql和Redis的区别
*** 为什么高并发使用redis不用mysql
*** binlog,redolog,undolog都是什么，起什么作用
*** 如何优化查询
*** sql如何优化
*** explain是如何解析sql的
*** 数据库基本查询关键字使用，如left join on,where,beteen and,group by,having,limit,聚合函数
*** left join,right join,inner join,outer join的含义及区别
*** order by原理
*** 数据库宕机后恢复的过程
*** MySQL日志类型
*** 分布式数据库如何保证数据可靠性
*** 了解过MySQL的主从复制吗，binlog记录格式，复制的异步半同步同步模式区别
*** 主从复制或读写分离等数据不一致性问题以及如何解决
*** 数据库读写分离、分库分表；
*** 如何删除表中的所有数据，delete和truncate的区别 
*** char, varchar, text的区别 
*** 一张表里数据量大，慢查询怎么办，如何排查
*** MySQL中一条SQL语句的执行过程
*** 跨表查询常见优化思路
*** 写一个分页查询 
** redis相关
*** 数据结构相关
**** String、Hash、List、Set、Zset（SortSet 底层结构
**** zset 跳跃表结构怎么做到有序性的？
**** zset跳表的数据结构（必考）
*** redis是单线程还是多线程？为什么那么快？
    纯内存、单线程、IO多路复用（一般会继续问IO多路复用相关问题） 
*** 五种IO模型的区别
*** redis持久化机制，aof持久化怎么写入的 
    RDB, AOF
*** Redis高可用
    哨兵机制、Redis Cluster、持久化（上面那个） 
*** redis网络协议，redis为什么单进程，为什么redis的decsby原子性
*** Redis的应用场景
*** Redis的数据过期淘汰策略（必考）
*** Redis的LRU过期策略的具体实现
*** 如何解决Redis缓存雪崩，缓存穿透问题
*** 如何保证缓存和数据库的数据一致性
*** Redis的管道pipeline
*** Redis常用命令
*** select、poll、epoll的区别
*** redis热key问题？如何发现以及如何解决？
*** redis数据分布方式？有什么优点？一致性hash呢？
*** redis主从复制，主从切换，集群
*** redis集群模式和哨兵模式说一说 
*** 主从结构
*** 数据库宕机后恢复的过程
*** 分布式缓存和本地缓存有啥区别？让你自己设计本地缓存怎么设计？如何解决缓存过期问题？如何解决内存溢出问题？ 
** 了解sql注入
** 从服务端如何防止SQL注入 
* linux
** 查找某个进程（ps aux |grep threadId） 
** 杀掉某个进程（kill，参数添加-9表示强制执行） 
** 查看某个端口是否被占用（netstat -anp |grep threadId） 
** 实时查看进程状态（top） 
** Linux的namespace
** 如何修改linux的文件权限
* 设计模式
** 单例模式
*** 懒汉、饿汉、双重校验锁、静态内部类 
** 工厂模式
** 观察者模式
** 装饰器模式
** 建造者模式
** 适配器模式(Adapter pattern)
** 桥接模式(Bridge pattern)
** 组合模式(composite pattern)
** 懒汉和饿汉的区别，懒汉的缺点 
** 手撕单例模式的双重检验锁
** 为什么要有两次检验 
* 框架工具
** spring相关
*** spring 对象怎么管理， 什么时候创建对象？
*** ssm框架的作用？相比其他框架有哪些优点 
*** Java反射机制
*** aop的全称是什么？作用是什么，实现原理是什么？ 
*** ioc容器的启动过程
*** Spring的IOC/AOP的实现（必考）
*** 动态代理的实现方式（必考）
*** Spring如何解决循环依赖（三级缓存）（必考）
*** Spring的后置处理器
*** Spring的@Transactional如何实现的（必考）
*** Spring的事务传播级别和事务传播属性
*** BeanFactory和ApplicationContext的联系和区别
*** IOC 和 AOP 的含义和原理
*** IOC（控制反转）和DI（依赖注入）有什么不同
*** Spring、SpringBoot、SpringMVC 的区别
*** SpringBoot 的优势
*** SpringMVC 的 MVC 指什么？好处呢 
*** SpringMVC 的流程 
*** SpringBoot 的启动流程
*** SpringBoot自动配置的原理是什么？介绍SpringBootApplication注解
*** Bean 的生命周期
*** Bean作用域？默认什么级别？是否线程安全？Spring如何保障线程安全的?
*** Spring管理的bean的对象存储在哪里。类的元信息比如常量表，字面量，静态字段在方法区（Method Area里），关于对象的数据在jvm堆里。
*** @Autowired和@Resource的区别，当UserDao存在不止一个bean或没有存在时，会怎样?怎么解决？
*** 什么情况下会用@Resource 
*** mybatis如何防止sql注入？$#的区别是什么？传入表明用哪个？
*** ORM框架Hibernate
*** Mybatis和Hibernate的区别
*** spring中的注解原理？例如事务注解，spring如何根据注解实现事务功能的
*** hibernate注解和XML
*** Spring中用到了哪些设计模式？单例、***、工厂、适配、观察者之类的说一说就行
*** Spring Dao用哪种设计模式用得最多？
** 微服务框架
*** 接触过springcloud吗？
*** 微服务一般都会有限流，有哪些手段（负载均衡、消息队列）
*** 提到了负载均衡，有哪些策略
*** 限流的算法有哪些
*** 令牌桶算法说一下具体怎么实现的 
** ES 底层熟悉吗， 怎么实现的快速的检索？（我也不知道）
** 中间件熟悉哪些？（不熟悉）
** Rabbitmq相关
*** rabbitmq消息队列如何解决消息丢失 
*** rabbitmq和其他消息队列的对比 
*** rabbitmq能避免发送重复数据吗？不清楚，说不可靠 
*** rabbitmq的可靠性如何保证 
*** rabbitmq 和 kafka 的区别
*** rabbitmq 如何保证事务
*** 消息队列的优势 
** Zookeeper相关
*** 对Zookeeper了解哪些？ 
*** Zookeeper如何做分布式锁 
*** CAP定理
*** ZAB协议
*** leader选举算法和流程 
** Nginx的负载均衡算法有哪些 
** 实习中用git开发的流程是怎么样的 



* linux
  - [ ] 看端口号
  - [ ] 从文件里搜索定位文本
  - [ ] 查看进程cpu负载
  - [ ] 查看文件内容的命令
* 操作系统
  - [ ] 进线程区别
  - [ ] 进程通信方式
  - [ ] 管道有大小限制吗？
  - [ ] 多进程与多线程系统比较
  - [ ] 进程共享什么资源，线程共享什么资源
* 网络
  - [ ] http相关
    - [ ] 浏览器请求过程
    - [ ] https和http区别
    - [ ] http1.0 1.1 ...的比较
  - [ ] tcp/udp相关
    - [ ] 三次握手
    - [ ] 四次挥手
    - [ ] 沾包问题
    - [ ] udp长度，tcp长度，MTU
    - [ ] 流量控制和拥塞控制, 拥塞窗口和发送窗口
    - [ ] udp多对多怎么实现的？
  - [ ] netty和socket
  - [ ] RPC
* 数据库
  - [ ] mysql相关
    - [ ] mysql慢查询优化
    - [ ] 了解哪几种存储引擎，区别
    - [ ] 索引类型
    - [ ] 聚簇索引和非聚簇索引的区别，非聚簇索引叶子节点记的是什么，非聚簇索引查询过程
    - [ ] 一个表最多几个聚簇索引
    - [ ] 间歇锁和记录锁
    - [ ] where a == 1 and b == 2 的间歇锁和记录锁情况
    - [ ] 隔离级别以及对应解决的问题
  - [ ] nosql相关
    - [ ] 了解哪些nosql数据库
    - [ ] nosql数据库和关系型区别
    - [ ] nosql适合存储怎样的数据，为什么？
  - [ ] 写sql
    - [ ] 姓名科目分数求平均分
  - [ ] java怎么连接mysql
* Java相关
  - [ ] Java基础
    - [ ] 接口和虚类区别
    - [ ] 指针和引用的区别
    - [ ] java内存泄露的场景
    - [ ] java构造器能否被重写
    - [ ] 对红黑树的了解
    - [ ] String能否被继承，和StringBuilder StringBuffer区别？
    - [ ] 数组和链表的区别？
    - [ ] 深拷贝浅拷贝
    - [ ] final finally finalize
    - [ ] java怎么实现多继承
  - [ ] 集合类
    - [ ] HashMap怎么解决冲突？为什么头插法？扩容机制？怎么降低重新插入的开销？
    - [ ] HashTable和HashMap区别
    - [ ] HashMap是否线程安全？为何？用什么保证线程安全？
  - [ ] jvm相关
    - [ ] 运行时数据区，栈和堆分别是啥，什么时候会栈溢出，递归与循环的效率
    - [ ] 新生代和老年代及对应的垃圾回收算法与原因
    - [ ] 设置eden, survivor比例的参数
    - [ ] CMS收集器过程
    - [ ] G1收集器过程
  - [ ] Java多线程并发
    - [ ] java线程安全的实现方法
    - [ ] 并发集合
      - [ ] 了解哪几种并发集合类
      - [ ] ConcurrentHashMap在1.7之前和1.8之后分别怎么实现并发(底层原理)的?cas+synchronized怎么配合的？
    - [ ] 有哪几种创建线程的方式
    - [ ] FutureTask了解吗？用callable和FutureTask写一个小demo
    - [ ] 有几种线程池，分别有什么特点以及适用场景优缺点
    - [ ] 线程池怎么用？为什么要用线程池?线程池中多个线程wait()再notify()的唤醒顺序？
    - [ ] synchronized和ReenTrantLock区别，是否公平，什么叫公平锁？
    - [ ] 悲观锁与乐观锁？为什么悲观锁会降低性能？
* 设计模式
* IO相关
* 算法和数据结构
  - [ ] BFS饭店问题
  - [ ] 快排和归排？复杂度？怎么避免快排的N2复杂度？
  - [ ] 大数据量用归并还是快排(内存够大or不够大)
  - [ ] leetcode 1143
* 大数据or开放题
  - [ ] 海量 ip-时间 访问记录，统计出现最多的ip?
* 项目相关
  - [ ] trie
    - [ ] 和HashMap与TreeMap相比的优缺点
    - [ ] 跳跃补全优化？
  - [ ] A*算法和Dijkstra算法
  - [ ] kd-tree实现及nearest方法
  - [ ] 优先级队列实现以及put方法复杂度
** 项目架构
** 功能实现
*** 响应用户请求返回最佳匹配图片
    - 输入用户请求映射{width, ullon, ullat, lrlon, lrlat}
    - 由请求每像素点上的纬度requestLonDPP与initLonDPP计算满足需求的LonDPP
    - 根据用户请求经纬度与LonDPP计算得到满足需求(在能力范围内包含用户请求区域的最小区域)的离散图片网格边界
    - 返回离散图片网格以及网格边界的经纬度信息(map)
*** 继承实现一个增强地图类，完成搜索地点补全并定位的功能。
    ~AugmentedStreetMapGraph~ extends ~StreetMapGraph~ implements ~AStarGraph~
    - ~AStarGraph~
      - ~neighbors~
      - ~estimatedDistanceToGoal~ 
    - ~StreetMapGraph~
      - ~StreetMapGraph~ 使用 ~readFromXML~ 从文件读取地图详细信息，包括节点信息以及节点的邻居信息
      - ~neighbors~ 返回一个节点的出边列表
      - ~estimatedDistanceToGoal~ 两点直线距离
      - ~getNode~ 返回一个图的节点列表
    - ~AugmentedStreetMapGraph~
      - 成员变量
        - ~pToNode~: ~Point~ 到 ~Node~ 的一一映射， ~Node~ 为地图节点结构，包含经纬度以及id和name信息， ~Point~ 仅包含经纬度信息，是 ~KDTree~ 的节点结构
        - ~nToNodes~: ~String~ 节点name到 ~List<Node>~ 节点列表的映射
        - ~clToNames~: ~String~ 节点cleanname 到 ~List<String>~ 节点name列表的映射
        - ~kt~: ~KDTree~ 实例， 输入一个 ~Point~ 的列表构造一颗二维空间搜索树
        - ~trie~: ~MyTrieSet~ 实例，输入节点的cleanname得到一颗字典树
      - ~AugmentedStreetMapGraph~: 构造函数，完成成员变量的初始化
      - ~closest~: 返回一个离给定坐标最近的节点id，用 ~kt.nearest()~ 实现
      - ~getLocationByPrefix~: 根据cleanname自动补全地点名称，返回一个地名列表，用 ~trie.keysWithPrefix~ 实现
      - ~getLocations~: 根据地名返回一个存储节点信息的映射列表，由 ~clToNames~ 和 ~nToNodes~ 配合完成
      - ~cleanString~: 键盘输入，输出忽略标点空格以及大小写的cleanname
*** 实现A*算法完成在地图类上两点之间的寻路功能
    ~AStarSolver~ implements ~ShortestPathsSolver~
    - 输入一个图的实例，起始节点和终止节点以及时间阈值
    - 存储优化A*算法
      - Create a PQ where each vertex v will have priority p equal to the sum of v’s distance from the source plus the heuristic estimate from v to the goal, i.e. p = distTo[v] + h(v, goal).
      - Insert the source vertex into the PQ.
      - Repeat until the PQ is empty, PQ.getSmallest() is the goal, or timeout is exceeded:
        - p = PQ.removeSmallest()
        - relax all edges outgoing from p
      - relax(e):
        - p = e.from(), q = e.to(), w = e.weight()
        - if distTo[p] + w < distTo[q]:
          - distTo[q] = distTo[p] + w
          - if q is in the PQ: changePriority(q, distTo[q] + h(q, goal))
          - if q is not in PQ: add(q, distTo[q] + h(q, goal))
*** 基于规划好的路径补充文字导航功能
    由 ~Router~ 类中的 ~routeDirections~ 实现
    - 输入一张图的实例，一条路径（节点列表），输出一个导航对象列表
    - 主要是沿着路径遍历节点，维持 ~prevNode~, ~distance~, ~street~, ~prevBearing~ 等变量
      - 两点间街道名称不变时，累加 ~distance~ 并更新 ~prevNode~ 和 ~prevBearing~ 
      - 两点间街道名称变化时根据 ~street~, ~distance~ 和 ~prevBearing~ 新建导航对象并存储，再更新 ~street~ 并把 ~distance~ 置0;

#+begin_src C 
  int solu(vector<int> input){
    int length = input.size();
    vector<int> dp(length,0);
    dp[0] = 1;
    for(int i=1; i<length; i++){
      if(input[i-1] == 1 && (input[i]>=0 || input[i]<=9)){
        dp[i] = dp[i-1] + 1;
      }else if(input[i-1] == 2 && (input[i]>=0 || input[i]<=6)){
        dp[i] = dp[i-1] + 1;
      }
      dp[i] = dp[i-1];
    }
    return dp[length-1];
  }
#+end_src
